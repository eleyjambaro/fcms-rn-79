export const routes = {
  createNewOrUseExistingAppData: () => 'CreateNewOrUseExistingAppData',
  selectExistingAppData: () => 'SelectExistingAppData',
  filesAndMediaManagementPermissionNeeded: () =>
    'FilesAndMediaManagementPermissionNeeded',
  accountSetup: () => 'AccountSetup',
  createUser: () => 'CreateUser',
  createAccount: () => 'CreateAccount',
  createCompany: () => 'CreateCompany',
  updateCompany: () => 'UpdateCompany',
  activateLicense: () => 'ActivateLicense',
  currencies: () => 'Currencies',
  login: () => 'Login',
  mainTab: () => 'MainTab',
  home: () => 'Home',
  account: () => 'Account',
  localUserAccounts: () => 'LocalUserAccounts',
  deleteMyAccount: () => 'DeleteMyAccount',
  cloudMainTab: () => 'CloudMainTab',
  cloudAccount: () => 'CloudAccount',
  cloudStart: () => 'CloudStart',
  cloudLogin: () => 'CloudLogin',
  cloudLoginViaOTPThruEmail: () => 'CloudLoginViaOTPThruEmail',
  cloudSignup: () => 'CloudSignup',
  settings: () => 'Settings',
  printers: () => 'Printers',
  createPrinter: () => 'CreatePrinter',
  vendors: () => 'Vendors',
  items: () => 'Items',
  addItem: () => 'AddItem',
  editItem: () => 'EditItem',
  itemCategory: () => 'ItemCategory',
  itemTax: () => 'ItemTax',
  itemVendor: () => 'ItemVendor',
  manageCategories: () => 'ManageCategories',
  manageTaxes: () => 'ManageTaxes',
  manageVendors: () => 'ManageVendors',
  itemUOM: () => 'ItemUOM',
  addItemUOM: () => 'AddItemUOM',
  itemView: () => 'ItemView',
  categoryView: () => 'CategoryView',
  itemSizeOptions: () => 'ItemSizeOptions',
  scanBarcode: () => 'ScanBarcode',
  manageStock: () => 'ManageStock',
  inventory: () => 'Inventory',
  purchaseEntryList: () => 'PurchaseEntryList',
  confirmPurchases: () => 'ConfirmPurchases',
  purchaseListHistory: () => 'PurchaseListHistory',
  purchaseListHistoryView: () => 'PurchaseListHistoryView',
  purchases: () => 'Purchases',
  purchaseCategoryView: () => 'PurchaseCategoryView',
  purchaseCategories: () => 'PurchaseCategories',
  stockUsageEntryList: () => 'StockUsageEntryList',
  confirmStockUsage: () => 'ConfirmStockUsage',
  stockUsageHistory: () => 'StockUsageHistory',
  stockUsageHistoryView: () => 'StockUsageHistoryView',
  itemPurchaseEntries: () => 'ItemPurchaseEntries',
  endingInventory: () => 'EndingInventory',
  itemAddedStocks: () => 'ItemAddedStocks',
  recipes: () => 'Recipes',
  recipeView: () => 'RecipeView',
  createRecipe: () => 'CreateRecipe',
  editRecipe: () => 'EditRecipe',
  recipeKind: () => 'RecipeKind',
  createSubRecipe: () => 'CreateSubRecipe',
  selectRecipeIngredient: () => 'SelectRecipeIngredient',
  produceFinishedProductStock: () => 'ProduceFinishedProductStock',
  revenues: () => 'Revenues',
  logs: () => 'Logs',
  logView: () => 'LogView',
  updateInventoryLog: () => 'UpdateInventoryLog',
  expenses: () => 'Expenses',
  expenseView: () => 'ExpenseView',
  addExpense: () => 'AddExpense',
  expenseCategory: () => 'ExpenseCategory',
  expenseGroups: () => 'ExpenseGroups',
  reports: () => 'Reports',
  spoilage: () => 'Spoilage',
  selectSpoilageItem: () => 'SelectSpoilageItem',
  salesInvoices: () => 'SalesInvoices',
  salesInvoiceView: () => 'SalesInvoiceView',
  counter: () => 'Counter',
  confirmSales: () => 'ConfirmSales',
  paymentMethod: () => 'PaymentMethod',
  splitPayment: () => 'SplitPayment',
  salesOrderRegister: () => 'SalesOrderRegister',
  salesOrderGroups: () => 'SalesOrderGroups',
  salesOrderGroupView: () => 'SalesOrderGroupView',
  // Reports
  foodCostAnalysis: () => 'FoodCostAnalysis',
  revenuesAndExpenses: () => 'FoodCostAnalysis', // alias for Food Cost Analysis
  profitAndLoss: () => 'ProfitAndLoss',
  foodVariance: () => 'FoodVariance',
  beverageVariance: () => 'BeverageVariance',
  foodMenuMix: () => 'FoodMenuMix',
  manageRevenueGroups: () => 'ManageRevenueGroups',
  manageExpenseGroups: () => 'ManageExpenseGroups',
  manageMonthlyExpenses: () => 'ManageMonthlyExpenses',
  monthlyReportByItem: () => 'MonthlyReportByItem',
  monthlyReportByCategory: () => 'MonthlyReportByCategory',
  customReportByItem: () => 'CustomReportByItem',
  customReportByCategory: () => 'CustomReportByCategory',
  itemReportView: () => 'ItemReportView',
};

export default routes;
